services:
  # Frontend provides NGINX as a proxy
  frontend:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    volumes:
      - ./nginx_logs:/var/log/nginx
    network_mode: host
    ports:
      - "0.0.0.0:80:80"
    tmpfs:
      - /var/run/fail2ban/
    depends_on:
      - backend
  # I'm a bit of exhausted of scammer scanning
  failtoban:
    build:
      context: .
      dockerfile: failtoban/Dockerfile
    volumes:
      - ./nginx_logs/:/var/log/nginx/
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      - frontend
  # Backend receives server launch requests from matchmaking server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    expose:
      - "3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - game_data:/ecr-server/LinuxServer/ECR/Saved/Logs/
    network_mode: host
    env_file:
      - prod.env
  # This container is only for building an image, actual game containers launch is orchestrated by backend
  gameserver:
    build:
      context: .
      dockerfile: gameserver/Dockerfile
    environment:
      DONT_LAUNCH_GAME: true
    volumes:
      - game_data:/ecr-server/LinuxServer/ECR/Saved/Logs/
    restart: no
  # Portainer is used for monitoring containers through Web interface
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: --admin-password '$$2b$$12$$eTpQT9G0sVpiuXS95w9PsehIybqSUC2QuzQXsrelI9Nae.d.bSZ0O'
    ports:
      - "0.0.0.0:9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    environment:
      - TZ=UTC

volumes:
  portainer_data:
    driver: local
  game_data:
    driver: local
